{"id":-1,"name":"Onboarding diagram","userId":-1,"createdAt":"","updatedAt":"","content":{"items":[{"uid":"bI0wBh3Ufk","position":{"x":120,"y":-270},"sizes":{"width":410,"height":200},"autoheight":false,"blockContent":{"type":"doc","content":[{"type":"heading","attrs":{"level":2},"content":[{"type":"text","text":"Welcome to CodeDiagram üòÑ"}]},{"type":"paragraph"},{"type":"heading","attrs":{"level":3},"content":[{"type":"text","text":"This is a visual note-taking tool that helps you visualize your code flow better."}]}]},"color":{"bgColor":"hsla(33, 94%, 80%, 1)","bgName":"orange-l"},"nodeType":"block"},{"uid":"hyyRZE3E8u","position":{"x":100,"y":320},"sizes":{"width":360,"height":240},"autoheight":false,"blockContent":{"type":"doc","content":[{"type":"filePathNode","content":[{"text":"src/app.js","type":"text","marks":[{"type":"bold"}]}]},{"type":"codeBlock","attrs":{"language":"javascript"},"content":[{"text":"function index() {\n  greeting()\n  makeACofee()\n  startCoding()\n}","type":"text"}]}]},"nodeType":"block"},{"uid":"6ZopTaEaDZ","position":{"x":180,"y":440},"sizes":{"width":360,"height":200},"autoheight":false,"blockContent":{"type":"doc","content":[{"type":"filePathNode","content":[{"text":"src/greeting.js","type":"text","marks":[{"type":"bold"}]}]},{"type":"codeBlock","attrs":{"language":"javascript"},"content":[{"text":"function greeting() {\n  console.log('Hello there')\n}","type":"text"}]}]},"color":{"bgColor":"hsla(214, 17%, 29%, 1)","bgName":"gray"},"nodeType":"block"},{"uid":"ytXK_ayIc1","position":{"x":-100,"y":-20},"sizes":{"width":410,"height":250},"autoheight":false,"blockContent":{"type":"doc","content":[{"type":"heading","attrs":{"level":1},"content":[{"type":"text","text":"To make a Code box"}]},{"type":"orderedList","attrs":{"start":1},"content":[{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"Split your editor vertically"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"Open your code (for example: "},{"type":"text","marks":[{"type":"code"}],"text":"app.js"},{"type":"text","text":") side-by-side with the "},{"type":"text","marks":[{"type":"bold"}],"text":"\"Code Diagram\" tab"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"Select some of your codes"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"Open the VSCode command > \""},{"type":"text","marks":[{"type":"bold"}],"text":"Code Diagram: Snip Code"},{"type":"text","text":"\""}]}]}]}]},"color":{"bgColor":"hsla(33, 94%, 80%, 1)","bgName":"orange-l"},"nodeType":"block"},{"uid":"hi9UbVX1_s","position":{"x":-340,"y":-280},"sizes":{"width":280,"height":200},"autoheight":false,"blockContent":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"More settings are in the top left menu:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"}],"text":"Export to PNG"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"}],"text":"Light and Dark themes"}]}]}]}]},"nodeType":"block"},{"uid":"HduNR37Az-","position":{"x":690,"y":-270},"sizes":{"width":400,"height":305},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"heading","attrs":{"level":1},"content":[{"type":"text","text":"Some tips "},{"type":"text","marks":[{"type":"bold"}],"text":"‚òÄÔ∏è"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"Double click on a blank area to create a new diagram"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"}],"text":"Quick delete"},{"type":"text","text":": select box and press Delete key"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"}],"text":"Undo"},{"type":"text","text":": Cmd/Ctrl + Z"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"}],"text":"Shortcuts"},{"type":"text","text":": open VSCode \"Keyboard Shortcuts\" and find \"Code Diagram\", there will be some commands such as:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"Snip Code"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"Snip File"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"Open Diagram"}]}]}]}]}]}]},"color":{"bgColor":"hsla(211, 33%, 22%, 1)","bgName":"blue"},"nodeType":"block"},{"uid":"8FX8zhZvfx","position":{"x":400,"y":340},"sizes":{"width":190,"height":88},"autoheight":true,"blockContent":{"text":"üí° Click the crosshair icon\nat top-right of the box\nto jump back to your source codes"},"nodeType":"text"},{"uid":"ssl8nJUAUs","position":{"x":-330,"y":800},"sizes":{"width":600,"height":333},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","content":[{"type":"text","marks":[{"type":"bold"}],"text":"components/Dashboard.vue"}]},{"type":"heading","attrs":{"level":1},"content":[{"type":"text","text":"A more complex example"}]},{"type":"codeBlock","attrs":{"language":"vue"},"content":[{"type":"text","text":"<template>\n  <div class=\"dashboard container mx-auto my-24 grid grid-cols-2 gap-4\">\n    <gh-pr-count uid=\"prc1\" class=\"h-ful\" />\n    <gh-pr-time uid=\"prt1\" class=\"h-full\" />\n    <gh-commit-review uid=\"ghcr1\" class=\"h-full\" />\n    <gh-review-merge uid=\"ghrm1\" class=\"h-full\" />\n    <gh-pr-opening uid=\"ghpo1\" class=\"h-full col-span-2 \" />\n  </div>\n</template>"}]}]},"nodeType":"block"},{"uid":"vXiggnAqDL","position":{"x":350,"y":1120},"sizes":{"width":400,"height":109},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","content":[{"type":"text","marks":[{"type":"bold"}],"text":"modules/metrics/GhPrCount.vue"}]},{"type":"paragraph","content":[{"type":"text","text":" "}]}]},"nodeType":"block"},{"uid":"39Bjj1hf92","position":{"x":350,"y":960},"sizes":{"width":400,"height":109},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","content":[{"type":"text","marks":[{"type":"bold"}],"text":"modules/metrics/GhPrTime.vue"}]},{"type":"paragraph","content":[{"type":"text","text":" "}]}]},"nodeType":"block"},{"uid":"X6IOn6KYL5","position":{"x":350,"y":1270},"sizes":{"width":400,"height":109},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","content":[{"type":"text","marks":[{"type":"bold"}],"text":"modules/metrics/GhCommitReview.vue"}]},{"type":"paragraph","content":[{"type":"text","text":" "}]}]},"nodeType":"block"},{"uid":"Cy37gFG8GG","position":{"x":350,"y":1580},"sizes":{"width":400,"height":109},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","content":[{"type":"text","marks":[{"type":"bold"}],"text":"modules/metrics/GhReviewMerge.vue"}]},{"type":"paragraph","content":[{"type":"text","text":" "}]}]},"nodeType":"block"},{"uid":"sAYFQK0PK8","position":{"x":350,"y":1420},"sizes":{"width":400,"height":109},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","content":[{"type":"text","marks":[{"type":"bold"}],"text":"modules/metrics/GhPrOpening.vue"}]},{"type":"paragraph","content":[{"type":"text","text":" "}]}]},"nodeType":"block"},{"uid":"Nkm-yzR51j","position":{"x":880,"y":1160},"sizes":{"width":400,"height":200},"autoheight":false,"blockContent":{"type":"doc","content":[{"type":"filePathNode","content":[{"type":"text","marks":[{"type":"bold"}],"text":"components/charts/types.ts"}]},{"type":"codeBlock","attrs":{"language":"typescript"},"content":[{"type":"text","text":"interface Dataset {\n  label: string,\n  data: any\n  dataType: 'date' | 'number' | 'string'\n  mainColor: string\n}\n\ninterface Label {\n  data: any\n  dataType: 'date' | 'number' | 'string'\n  axisLabel: string\n}\n\ninterface ChartData {\n  label: Label,\n  datasets: Dataset[],\n  firstYaxis?: {\n    label: string\n  }\n}\n\ninterface TableData {\n  label: string,\n  rows: any\n}\n\ninterface LegendItem {\n  datasetIndex: number\n  fillStyle: string\n  fontColor: string\n  hidden: boolean\n  text: string\n}\n\nexport type {\n  Dataset,\n  Label,\n  ChartData,\n  TableData,\n  LegendItem\n}\n"}]}]},"color":{"bgColor":"hsla(19, 31%, 31%, 1)","bgName":"orange"},"nodeType":"block"},{"uid":"updMyGs-5u","position":{"x":-210.87135677719533,"y":-91.98416788476788},"sizes":{"width":400,"height":109},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"src\\App.tsx"}]},{"type":"paragraph","content":[{"type":"text","text":" "}]}]},"nodeType":"block"},{"uid":"IUBYRj72eR","position":{"x":-210.87135677719533,"y":-91.98416788476788},"sizes":{"width":400,"height":6297},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"src\\App.tsx"}]},{"type":"codeBlock","attrs":{"language":"typescript","wrapCode":true},"content":[{"type":"text","text":"import { useState } from \"react\";\n\n/**\n * A Square component is responsible for rendering a single square\n * in the tic tac toe board.\n *\n * Props:\n * - value: The value of the square (either \"\", \"X\", or \"O\").\n * - onSquareClick: A function that is called when the square is clicked.\n *   The function should take no arguments.\n */\nfunction Square({ value, onSquareClick }: { value: string; onSquareClick: () => void }) {\n  return (\n    /**\n     * The button element is used to render the square. The \"square\"\n     * class is used to style the square.\n     */\n    <button className=\"square\" onClick={onSquareClick}>\n      {/* The value of the square is rendered as text inside the button. */}\n      {value}\n    </button>\n  );\n}\n\n/**\n * A Board component is responsible for rendering a single game board\n * in the tic tac toe application.\n *\n * Props:\n * - xIsNext: A boolean indicating whether it is currently X's turn.\n * - squares: An array of strings representing the value of each of the 9 squares\n *   in the game board. The values can be either \"\", \"X\", or \"O\".\n * - onPlay: A function that is called when a player clicks on a square. The\n *   function takes one argument, an array of strings representing the updated\n *   state of the game board.\n */\nfunction Board({ xIsNext, squares, onPlay }: { xIsNext: boolean; squares: string[]; onPlay: (nextSquares: string[]) => void }) {\n  /**\n   * This function is called when a player clicks on a square. It determines\n   * whether the game is over, and if not, which player's turn it is, and\n   * updates the state of the game board accordingly.\n   *\n   * @param i The index of the square that was clicked.\n   */\n  function handleClick(i: number) {\n    /**\n     * If the square is already occupied, or if the game is over, do nothing.\n     */\n    if (squares[i] || calculateWinner(squares)) {\n      return;\n    }\n\n    /**\n     * Create a copy of the current state of the game board.\n     */\n    const nextSquares = squares.slice();\n\n    /**\n     * If it is X's turn, set the value of the square to \"X\". If it is O's turn,\n     * set the value of the square to \"O\".\n     */\n    if (xIsNext) {\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    }\n\n    /**\n     * Call the onPlay prop with the updated state of the game board.\n     */\n    onPlay(nextSquares);\n  }\n\n  /**\n   * Determine the current status of the game. If there is a winner, the status\n   * is \"Winner: <winner>\". Otherwise, the status is \"Next player: <nextPlayer>\",\n   * where <nextPlayer> is either \"X\" or \"O\".\n   */\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n\n  /**\n   * A function to render a single square in the game board. It takes an index\n   * as an argument, and returns a Square component with the appropriate value\n   * and onSquareClick prop.\n   *\n   * @param index The index of the square to render.\n   */\n  const renderSquare = (index: number) => (\n    /**\n     * Render a Square component with the current value of the square, and with\n     * an onSquareClick prop that calls handleClick with the index of the square.\n     */\n    <Square value={squares[index]} onSquareClick={() => handleClick(index)} />\n  );\n\n  /**\n   * Render the game board. The board is divided into three rows, with three\n   * squares in each row. Each square is rendered with the renderSquare function.\n   */\n  return (\n    <>\n      {/* Render the current status of the game. */}\n      <div className=\"status\">{status}</div>\n      {/* Render the first row of the game board. */}\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      {/* Render the second row of the game board. */}\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      {/* Render the third row of the game board. */}\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </>\n  );\n}\n\nexport default function Game() {\n  /**\n   * The state of the game is stored in the history array, which is an array of\n   * arrays of strings. Each inner array represents the state of the game board\n   * at a particular point in time, and each string in the inner array represents\n   * the value of a particular square in the game board.\n   */\n  const [history, setHistory] = useState<Array<Array<string>>>([Array(9).fill(\"\")]);\n\n  /**\n   * The currentMove state variable keeps track of the current move number, which\n   * is used to index into the history array to get the current state of the game\n   * board.\n   */\n  const [currentMove, setCurrentMove] = useState(0);\n\n  /**\n   * The xIsNext state variable is a boolean that is used to determine whether it\n   * is X's turn or O's turn. It is set to true if the current move number is even,\n   * and false if the current move number is odd.\n   */\n  const xIsNext = currentMove % 2 === 0;\n\n  /**\n   * The currentSquares state variable is used to store the current state of the\n   * game board. It is set to the current state of the game board by indexing into\n   * the history array with the current move number.\n   */\n  const currentSquares = history[currentMove];\n\n  /**\n   * The handlePlay function is called when a player makes a move. It takes the\n   * new state of the game board as an argument, and updates the history array\n   * with the new state of the game board. It also updates the currentMove state\n   * variable to point to the new state of the game board.\n   *\n   * @param nextSquares The new state of the game board.\n   */\n  function handlePlay(nextSquares: string[]) {\n    /**\n     * Create a new array that contains all of the elements of the history array,\n     * up to and including the current move number.\n     */\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n\n    /**\n     * Set the history state variable to the new array.\n     */\n    setHistory(nextHistory);\n\n    /**\n     * Set the currentMove state variable to the index of the last element in the\n     * new array.\n     */\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  /**\n   * The jumpTo function is called when a player clicks on a move number in the\n   * move list. It takes the move number as an argument, and updates the\n   * currentMove state variable to point to the state of the game board at the\n   * specified move number.\n   *\n   * @param nextMove The move number to jump to.\n   */\n  function jumpTo(nextMove: number) {\n    /**\n     * Set the currentMove state variable to the specified move number.\n     */\n    setCurrentMove(nextMove);\n  }\n\n  /**\n   * The moves state variable is an array of JSX elements that represent the\n   * moves in the game. Each element in the array is a list item that contains a\n   * button with a description of the move, and an event handler that calls the\n   * jumpTo function when the button is clicked.\n   */\n  const moves = history.map((_, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return (\n      <li key={move}>\n        {/* Create a button element with the description of the move as its text. */}\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        {/* Render the game board, passing in the current state of the game board,\n        and an onPlay prop that calls the handlePlay function when a player\n        makes a move. */}\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        {/* Render the move list, which is a list of buttons that represent the\n        moves in the game. */}\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares: string[]) {\n  // Array of lines representing all possible winning combinations\n  const lines = [\n    [0, 1, 2], // Top row\n    [3, 4, 5], // Middle row\n    [6, 7, 8], // Bottom row\n    [0, 3, 6], // Left column\n    [1, 4, 7], // Middle column\n    [2, 5, 8], // Right column\n    [0, 4, 8], // Diagonal from top-left to bottom-right\n    [2, 4, 6]  // Diagonal from top-right to bottom-left\n  ];\n\n  // Iterate over each line\n  for (let i = 0; i < lines.length; i++) {\n    // Destructure the line to get the indices of the squares\n    const [a, b, c] = lines[i];\n\n    // Check if the squares at these indices are equal and not empty\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      // If they are equal, we have a winner, return the winner (either \"X\" or \"O\")\n      return squares[a];\n    }\n  }\n\n  // If no winner is found, return null\n  return null;\n}\n"}]}]},"nodeType":"block"}],"configs":{"centerX":399.0590486994188,"centerY":609.9825354968084,"zoomLevel":1.017264811197917},"arrowData":{"arrowsMap":{"arrow-point-bI0wBh3Ufk-bottom-point-PSPLIYKa9J-top":{"to":"point-PSPLIYKa9J-top","from":"point-bI0wBh3Ufk-bottom","label":"Normal Box","direction":"ft","selectable":true},"arrow-point-bI0wBh3Ufk-bottom-point-ytXK_ayIc1-top":{"to":"point-ytXK_ayIc1-top","from":"point-bI0wBh3Ufk-bottom","label":"Code Box","direction":"ft","selectable":true},"arrow-point-hyyRZE3E8u-right-point-6ZopTaEaDZ-left":{"to":"point-6ZopTaEaDZ-left","from":"point-hyyRZE3E8u-right","label":"call","direction":"ft","selectable":true}},"pointsMap":{"point-PSPLIYKa9J-top":{"x":805.9999797489683,"y":60,"id":"point-PSPLIYKa9J-top","direction":"top"},"point-ytXK_ayIc1-top":{"x":205.99999493724206,"y":60,"id":"point-ytXK_ayIc1-top","direction":"top"},"point-6ZopTaEaDZ-left":{"x":220,"y":605.9999898744841,"id":"point-6ZopTaEaDZ-left","direction":"left"},"point-hyyRZE3E8u-right":{"x":100,"y":606,"id":"point-hyyRZE3E8u-right","direction":"right"},"point-bI0wBh3Ufk-bottom":{"x":515.9999797489683,"y":-40,"id":"point-bI0wBh3Ufk-bottom","direction":"bottom"}},"edgesMap":{"arrow-point-bI0wBh3Ufk-bottom-point-ytXK_ayIc1-top":{"uid":"arrow-point-bI0wBh3Ufk-bottom-point-ytXK_ayIc1-top","fromNodeId":"bI0wBh3Ufk","fromHandleId":"bI0wBh3Ufk-bottom","toNodeId":"ytXK_ayIc1","toHandleId":"ytXK_ayIc1-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"arrow-point-hyyRZE3E8u-right-point-6ZopTaEaDZ-left":{"uid":"arrow-point-hyyRZE3E8u-right-point-6ZopTaEaDZ-left","fromNodeId":"hyyRZE3E8u","fromHandleId":"hyyRZE3E8u-right","toNodeId":"6ZopTaEaDZ","toHandleId":"6ZopTaEaDZ-left","direction":"ft","selectable":true,"type":"solid","content":{"label":"call"}},"edge-ytXK_ayIc1-ytXK_ayIc1-bottom-hyyRZE3E8u-hyyRZE3E8u-top":{"uid":"edge-ytXK_ayIc1-ytXK_ayIc1-bottom-hyyRZE3E8u-hyyRZE3E8u-top","fromNodeId":"ytXK_ayIc1","fromHandleId":"ytXK_ayIc1-bottom","toNodeId":"hyyRZE3E8u","toHandleId":"hyyRZE3E8u-top","direction":"ft","selectable":true,"type":"solid","content":{"label":"Here is an example"}},"edge-ssl8nJUAUs-ssl8nJUAUs-right-39Bjj1hf92-39Bjj1hf92-left":{"uid":"edge-ssl8nJUAUs-ssl8nJUAUs-right-39Bjj1hf92-39Bjj1hf92-left","fromNodeId":"ssl8nJUAUs","fromHandleId":"ssl8nJUAUs-right","toNodeId":"39Bjj1hf92","toHandleId":"39Bjj1hf92-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-ssl8nJUAUs-ssl8nJUAUs-right-vXiggnAqDL-vXiggnAqDL-left":{"uid":"edge-ssl8nJUAUs-ssl8nJUAUs-right-vXiggnAqDL-vXiggnAqDL-left","fromNodeId":"ssl8nJUAUs","fromHandleId":"ssl8nJUAUs-right","toNodeId":"vXiggnAqDL","toHandleId":"vXiggnAqDL-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-ssl8nJUAUs-ssl8nJUAUs-right-X6IOn6KYL5-X6IOn6KYL5-left":{"uid":"edge-ssl8nJUAUs-ssl8nJUAUs-right-X6IOn6KYL5-X6IOn6KYL5-left","fromNodeId":"ssl8nJUAUs","fromHandleId":"ssl8nJUAUs-right","toNodeId":"X6IOn6KYL5","toHandleId":"X6IOn6KYL5-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-ssl8nJUAUs-ssl8nJUAUs-right-sAYFQK0PK8-sAYFQK0PK8-left":{"uid":"edge-ssl8nJUAUs-ssl8nJUAUs-right-sAYFQK0PK8-sAYFQK0PK8-left","fromNodeId":"ssl8nJUAUs","fromHandleId":"ssl8nJUAUs-right","toNodeId":"sAYFQK0PK8","toHandleId":"sAYFQK0PK8-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-ssl8nJUAUs-ssl8nJUAUs-right-Cy37gFG8GG-Cy37gFG8GG-left":{"uid":"edge-ssl8nJUAUs-ssl8nJUAUs-right-Cy37gFG8GG-Cy37gFG8GG-left","fromNodeId":"ssl8nJUAUs","fromHandleId":"ssl8nJUAUs-right","toNodeId":"Cy37gFG8GG","toHandleId":"Cy37gFG8GG-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-hyyRZE3E8u-hyyRZE3E8u-bottom-ssl8nJUAUs-ssl8nJUAUs-top":{"uid":"edge-hyyRZE3E8u-hyyRZE3E8u-bottom-ssl8nJUAUs-ssl8nJUAUs-top","fromNodeId":"hyyRZE3E8u","fromHandleId":"hyyRZE3E8u-bottom","toNodeId":"ssl8nJUAUs","toHandleId":"ssl8nJUAUs-top","direction":"ft","selectable":true,"type":"solid","content":{"label":"A more complex example"}},"edge-X6IOn6KYL5-X6IOn6KYL5-right-Nkm-yzR51j-Nkm-yzR51j-left":{"uid":"edge-X6IOn6KYL5-X6IOn6KYL5-right-Nkm-yzR51j-Nkm-yzR51j-left","fromNodeId":"X6IOn6KYL5","fromHandleId":"X6IOn6KYL5-right","toNodeId":"Nkm-yzR51j","toHandleId":"Nkm-yzR51j-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-vXiggnAqDL-vXiggnAqDL-right-Nkm-yzR51j-Nkm-yzR51j-left":{"uid":"edge-vXiggnAqDL-vXiggnAqDL-right-Nkm-yzR51j-Nkm-yzR51j-left","fromNodeId":"vXiggnAqDL","fromHandleId":"vXiggnAqDL-right","toNodeId":"Nkm-yzR51j","toHandleId":"Nkm-yzR51j-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-39Bjj1hf92-39Bjj1hf92-right-Nkm-yzR51j-Nkm-yzR51j-left":{"uid":"edge-39Bjj1hf92-39Bjj1hf92-right-Nkm-yzR51j-Nkm-yzR51j-left","fromNodeId":"39Bjj1hf92","fromHandleId":"39Bjj1hf92-right","toNodeId":"Nkm-yzR51j","toHandleId":"Nkm-yzR51j-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-sAYFQK0PK8-sAYFQK0PK8-right-Nkm-yzR51j-Nkm-yzR51j-left":{"uid":"edge-sAYFQK0PK8-sAYFQK0PK8-right-Nkm-yzR51j-Nkm-yzR51j-left","fromNodeId":"sAYFQK0PK8","fromHandleId":"sAYFQK0PK8-right","toNodeId":"Nkm-yzR51j","toHandleId":"Nkm-yzR51j-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-Cy37gFG8GG-Cy37gFG8GG-right-Nkm-yzR51j-Nkm-yzR51j-left":{"uid":"edge-Cy37gFG8GG-Cy37gFG8GG-right-Nkm-yzR51j-Nkm-yzR51j-left","fromNodeId":"Cy37gFG8GG","fromHandleId":"Cy37gFG8GG-right","toNodeId":"Nkm-yzR51j","toHandleId":"Nkm-yzR51j-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}}}}}}